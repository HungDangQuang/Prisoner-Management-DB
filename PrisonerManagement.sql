DROP TABLE PRISON CASCADE CONSTRAINTS;
DROP TABLE PRISONER CASCADE CONSTRAINTS;
DROP TABLE CRIME CASCADE CONSTRAINTS;
DROP TABLE JAILER CASCADE CONSTRAINTS;
DROP TABLE TASK CASCADE CONSTRAINTS;
DROP TABLE TASKDETAIL CASCADE CONSTRAINTS;

SET SERVEROUTPUT ON;
ALTER SESSION SET NLS_DATE_FORMAT = 'DD-MM-YYYY HH24:MI:SS';

CREATE TABLE PRISON
(
	PID INT, -- prison id
	CAPACITY INT,
	--PRIMARY KEY
	CONSTRAINT PK_PRISON_PID PRIMARY KEY (PID),
	--CHECK CONSTRAINT
	CONSTRAINT CHECK_AMOUNT CHECK (CAPACITY > 0)
);



CREATE TABLE PRISONER --tù nhân
(
	PRID INT, -- prisoner id
	PNAME VARCHAR(30) NOT NULL, --Prisoner full name
	SEX VARCHAR(10) NOT NULL, 
	AGE INT NOT NULL,
	STARTDATE date NOT NULL, 
	ENDDATE date NOT NULL,
	BIRTHPLACE VARCHAR(50) NOT NULL,
	PID INT, -- prison id 
    CID INT, -- crime id
	--CHECK CONSTRAINT
	CONSTRAINT CHECK_PR_SEX CHECK (SEX IN ('Male','Female')),
	CONSTRAINT CHECK_PR_TIME CHECK (STARTDATE < ENDDATE),
	CONSTRAINT CHECK_PR_AGE CHECK (AGE >= 18),
	--PRIMARY KEY
	CONSTRAINT PK_PRISONER_PRID PRIMARY KEY(PRID)
);

CREATE TABLE CRIME --toi danh 
(
	CID INT, -- crime id
	CNAME VARCHAR(20) NOT NULL, 
	--RIMARY KEY
	CONSTRAINT PK_CRIME_CID PRIMARY KEY(CID)
);



CREATE TABLE JAILER -- quan nguc
(
    JID INT, --jailer id
	JNAME VARCHAR(50) NOT NULL,
	SEX VARCHAR(10) NOT NULL,
	PHONENUMBER VARCHAR(10) NOT NULL,	
	EMAIL VARCHAR(50) NOT NULL,
	ADDRESS VARCHAR(50) NOT NULL,
	SALARY INT NOT NULL,
	STARTDATE date NOT NULL,
	STATUS VARCHAR(20),
    TID INT,
	--CHECK CONSTRAINT
	CONSTRAINT CHECK_SALARY CHECK (SALARY > 0),
	CONSTRAINT CHECK_SEX CHECK (SEX IN ('MALE','FEMALE')),
	--PRIMARY KEY
	CONSTRAINT PK_JAILER_JID PRIMARY KEY (JID)
);

CREATE TABLE TASK --công vi?c 
(
	TID INT, -- task id
	TNAME VARCHAR(200) NOT NULL,
	--PRIMARY KEY
	CONSTRAINT PK_TASK_TID PRIMARY KEY (TID)
);

CREATE TABLE TASKDETAIL -- chi tiet cong viec 
(
	TID INT, -- task id
	PRID INT, -- prisonser id
	STARTDATE date NOT NULL,
	ENDDATE date NOT NULL,
	RATE INT, -- 1: good, 0: not good, null: not completed
	--PRIMARY KEY
	CONSTRAINT PK_DETAILTASK_DID PRIMARY KEY (TID,PRID),
	--CHECK CONSTRAINT
	CONSTRAINT CHECK_TIME CHECK (STARTDATE < ENDDATE)
);

-- ADD FOREIGN KEY

-- PRISONER  
ALTER TABLE PRISONER ADD CONSTRAINT PRISONER_CID_FK FOREIGN KEY (CID) REFERENCES CRIME(CID) ON DELETE CASCADE;
ALTER TABLE PRISONER ADD CONSTRAINT PRISONER_PID_FK FOREIGN KEY (PID) REFERENCES PRISON(PID) ON DELETE CASCADE;


--JAILER
ALTER TABLE JAILER ADD CONSTRAINT JAILER_TID_FK FOREIGN KEY (TID) REFERENCES TASK(TID) ON DELETE CASCADE;

-- DETAIL TASK
ALTER TABLE TASKDETAIL ADD CONSTRAINT TASKDETAIL_TID_FK FOREIGN KEY (TID) REFERENCES TASK(TID) ON DELETE CASCADE;
ALTER TABLE TASKDETAIL ADD CONSTRAINT TASKDETAIL_PRID_FK FOREIGN KEY (PRID) REFERENCES PRISONER(PRID) ON DELETE CASCADE;


INSERT INTO PRISON VALUES(101, 4);
INSERT INTO PRISON VALUES(102, 6);
INSERT INTO PRISON VALUES(103, 8);
INSERT INTO PRISON VALUES(104, 4);
INSERT INTO PRISON VALUES(105, 4);
INSERT INTO PRISON VALUES(106, 6);
COMMIT;

INSERT INTO CRIME VALUES(100001, 'Forgery'); -- lam tien gia
INSERT INTO CRIME VALUES(100002, 'Fraud'); -- lua dao
INSERT INTO CRIME VALUES(100003, 'Murder'); -- giet nguoi
INSERT INTO CRIME VALUES(100004, 'Embezzlement'); -- tham o
INSERT INTO CRIME VALUES(100005, 'Drug trafficking'); -- buon ma tuy
COMMIT;


 
INSERT INTO PRISONER VALUES(10001, 'Mai Xuan Tu','Male', 30, '31/7/2016', '1/8/2022', 'Sai Gon',102,100001);
INSERT INTO PRISONER VALUES(10002, 'Do Tien Dat','Male', 21, '01/6/2011', '11/1/2025', 'Can Tho',102,100002);
INSERT INTO PRISONER VALUES(10003, 'Hoang Quang Thang','Male', 40, '31/3/2012', '2/8/2023', 'Dong Nai',102,100003);
INSERT INTO PRISONER VALUES(10004, 'Dang Hoang Khoa','Male', 19, '5/5/2016', '10/10/2030', 'My Tho',102,100004);
INSERT INTO PRISONER VALUES(10005, 'Dinh Hong Tra','Male', 20, '12/9/2016', '14/8/2020', 'Kien Giang',103,100005);
INSERT INTO PRISONER VALUES(10006, 'Nguyen Thi Yen','Female', 35, '6/7/2009', '20/2/2021', 'Hau Giang',103,100001);
INSERT INTO PRISONER VALUES(10007, 'Doan Thi Kim','Female', 31, '4/12/2000', '19/12/2015', 'Ca Mau',103,100002);
INSERT INTO PRISONER VALUES(10008, 'Vo Van Hue','Female', 28, '31/3/2008', '1/8/2012', 'Vinh Long',103,100002);
INSERT INTO PRISONER VALUES(10009, 'Du Cong Long','Male', 37, '31/7/2001', '27/11/2022', 'Tra Vinh',103,100003);
INSERT INTO PRISONER VALUES(10010, 'Le Vu Duy','Male', 42, '15/3/2004', '19/8/2022', 'Dong Thap',103,100004);
INSERT INTO PRISONER VALUES(10011, 'Ly Thi Tra','Female', 38, '31/10/2006', '17/8/2027', 'Long Xuyen',103,100005);
INSERT INTO PRISONER VALUES(10012, 'Lieu Mac','Female', 31, '31/12/2013', '11/9/2026', 'Soc Trang',103,100001);
INSERT INTO PRISONER VALUES(10013, 'Huynh Van Banh','Male', 30, '30/8/2010', '1/8/2029', 'Bac Lieu',106,100002);
COMMIT;


INSERT INTO TASK VALUES(1,'Plant tree');
INSERT INTO TASK VALUES(2,'Clean toilet');
INSERT INTO TASK VALUES(3,'Clean room');
COMMIT;

INSERT INTO JAILER VALUES(1001, 'Nguyen Ung Yen','MALE', '0678906564','nhy@gmail.com','Sai Gon',7000000,'22/10/2010','Working',1);
INSERT INTO JAILER VALUES(1002, 'Nguyen Mai Hoa','FEMALE', '0234567899','nmh@gmail.com','Sai Gon',1000000,'20/11/2010','Working',2);
INSERT INTO JAILER VALUES(1003, 'Cao Khanh','MALE', '022513973','ck@gmail.com','Sai Gon',1000000,'2/10/2010','Working',3);
INSERT INTO JAILER VALUES(1004, 'Dang Viet Thanh','MALE', '011257557','dvt@gmail.com','Sai Gon',5000000,'25/1/2014','Absence', null);
INSERT INTO JAILER VALUES(1005, 'Le Thanh Cong','MALE', '078514258','ltc@gmail.com','Sai Gon',2000000,'21/10/2017','Absence', null);
COMMIT;


INSERT INTO TASKDETAIL VALUES(1, 10009, '30/7/2010', '30/12/2010',1);
INSERT INTO TASKDETAIL VALUES(2, 10011, '1/1/2011', '6/12/2011',1);
INSERT INTO TASKDETAIL VALUES(3, 10010, '3/7/2012', '3/12/2012',0);
INSERT INTO TASKDETAIL VALUES(1, 10008, '30/7/2011', '30/12/2012',1);
INSERT INTO TASKDETAIL VALUES(1, 10012, '30/7/2012', '30/12/2014',1);
INSERT INTO TASKDETAIL VALUES(2, 10012, '1/2/2010', '30/12/2020',null);
INSERT INTO TASKDETAIL VALUES(1, 10007, '30/8/2016', '30/12/2018',0);
INSERT INTO TASKDETAIL VALUES(3, 10007, '30/1/2019', '30/12/2021',null);
COMMIT;



-- Create procedure that search a prisoner

CREATE OR REPLACE PROCEDURE SEARCH_PRISONER(PRISONER_ID IN PRISONER.PRID%TYPE) IS
    PRNAME PRISONER.PNAME%TYPE;
    PRCRIME CRIME.CNAME%TYPE;
    BEGIN
        SELECT P.PNAME, C.CNAME INTO PRNAME, PRCRIME
        FROM PRISONER P
        JOIN CRIME C
        ON P.CID = C.CID
        WHERE P.PRID = PRISONER_ID;
        DBMS_OUTPUT.PUT_LINE(PRNAME || '    ' || PRCRIME);
   END;
   
--BEGIN 
  --  Search_Prisoner(10000);
--END;


-- Show name of prisoners and number of task they must do. 
CREATE OR REPLACE PROCEDURE LOOK_PRISONER_TASK (PRISONER_ID IN PRISONER.PRID%TYPE) IS
    PRNAME PRISONER.PNAME%TYPE;
    AMOUNT INT;
    BEGIN
        SELECT P.PNAME, COUNT(D.TID) INTO PRNAME, AMOUNT
        FROM PRISONER P
        FULL JOIN TASKDETAIL D
        ON P.PRID = D.PRID
        WHERE P.PRID = PRISONER_ID
        GROUP BY P.PNAME;
            DBMS_OUTPUT.PUT_LINE('Prisoner ' || PRNAME || ' has ' || AMOUNT ||' task to do');
    END;

--BEGIN 
  --  LOOK_PRISONER_TASK(10000);
--END;

-- Check the detail task table, if the prisoner rate is 1 (good), decrease the break free time 1 year.
CREATE OR REPLACE PROCEDURE CHECK_RATE IS
PRISONER_ID TASKDETAIL.PRID%TYPE;
PRISONER_NAME PRISONER.PNAME%TYPE;
CURSOR A IS SELECT P.PRID, P.PNAME
            FROM TASKDETAIL D
            INNER JOIN PRISONER P
            ON D.PRID = P.PRID
            WHERE RATE = 1;
BEGIN
    OPEN A;
    LOOP
        FETCH A INTO PRISONER_ID, PRISONER_NAME;
        EXIT WHEN A%NOTFOUND;
        UPDATE PRISONER
        SET ENDDATE = ENDDATE + numtoyminterval(-1, 'year')
        WHERE PRID = PRISONER_ID;
        DBMS_OUTPUT.PUT_LINE('Prisoner ' || PRISONER_NAME || ' Decreased 1 year break free date');        
    END LOOP;
    CLOSE A;
END;

--BEGIN
  --  CHECK_RATE;
--END;

-- Input: prison id, if the prison has no prisoner, delete that prison.
CREATE OR REPLACE PROCEDURE DELETE_PRISON(PRISON_ID IN PRISON.PID%TYPE)
IS
AMOUNT INT;
BEGIN
    SELECT COUNT(PR.PRID) INTO AMOUNT
    FROM PRISONER PR
    JOIN PRISON P
    ON PR.PID = P.PID
    WHERE P.PID = PRISON_ID;
    IF AMOUNT > 0 THEN
        DBMS_OUTPUT.PUT_LINE('Cannot delete prison because some prisoners are in');
    ELSE
        DELETE FROM PRISON WHERE PID = PRISON_ID;
        COMMIT;
        DBMS_OUTPUT.PUT_LINE('Prison ' || PRISON_ID || ' deleted');
    END IF;
END;
        
--BEGIN
  --  DELETE_PRISON(101);
--END;    

-- Create procedure show number of prisoners for each crime
CREATE OR REPLACE PROCEDURE SHOW_CRIME IS
    CR CRIME.CNAME%TYPE;
    AMOUNT INT;
    CURSOR A IS SELECT C.CNAME, COUNT(P.PRID)
                FROM CRIME C
                INNER JOIN PRISONER P 
                ON C.CID = P.CID
                GROUP BY C.CNAME;
    BEGIN
    OPEN A;
    LOOP
        FETCH A INTO CR, AMOUNT;
        EXIT WHEN A%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE( CR || ': ' || AMOUNT);
    END LOOP;
    CLOSE A;
END;

--BEGIN
  --  SHOW_CRIME;
--END;

-- Create function show number of prisoners in prison
CREATE OR REPLACE FUNCTION AMOUNT_OF_PRISONERS (PRISON_ID IN PRISON.PID%TYPE)
    RETURN NUMBER
    IS
    AMOUNT NUMBER;
    BEGIN
        SELECT COUNT(*) INTO AMOUNT 
        FROM PRISONER PR
        JOIN PRISON P
        ON PR.PID = P.PID
        WHERE P.PID = PRISON_ID;
        RETURN AMOUNT;
    END;


--BEGIN
  --  dbms_output.put_line('Number of prisoners in prison:' || AMOUNT_OF_PRISONERS (102));
--END;

--Create function number of prisoner who have a input crime
CREATE OR REPLACE FUNCTION NUMBER_OF_PRISONERS (C_NAME IN CRIME.CNAME%TYPE)
    RETURN NUMBER
    IS
    AMOUNT INT;
    BEGIN
        SELECT COUNT(P.PRID) INTO AMOUNT 
        FROM PRISONER P
        INNER JOIN CRIME C
        ON P.CID = C.CID
        WHERE C.CNAME = C_NAME;
        RETURN AMOUNT;
    END;
    
--BEGIN
  --  dbms_output.put_line('Number of rows have this crime:' || NUMBER_OF_PRISONERS ('Fraud'));
--END;

-- Input a date, return number of prisoners break free before that date
CREATE OR REPLACE FUNCTION SHOW_PRISONERS_BREAK_FREE (BREAK_DATE IN DATE)
    RETURN NUMBER
    IS
    AMOUNT INT;
    BEGIN
        SELECT COUNT(P.PRID) INTO AMOUNT
        FROM PRISONER P
        WHERE P.ENDDATE < BREAK_DATE;
        RETURN AMOUNT;   
    END;
    
--BEGIN
   -- DBMS_OUTPUT.PUT_LINE('Number of prisoners break free before 1/1/2021 is:'|| SHOW_PRISONERS_BREAK_FREE ('1/1/2021'));
--END;

-- Create function sum of the raise to jailers who have worked for 2 years or more. The raise is 10% his/her salary 
CREATE OR REPLACE FUNCTION SHOW_RAISE
RETURN NUMBER
IS
SUM_RAISE NUMBER;
BEGIN
    SELECT SUM(0.1 * Salary) INTO SUM_RAISE
    FROM JAILER J
    WHERE MONTHS_BETWEEN(SYSDATE, J.STARTDATE )/12 > 2;
    RETURN SUM_RAISE;
END;

--BEGIN
  --  DBMS_OUTPUT.PUT_LINE('Sum of raise is ' || SHOW_RAISE());
--END;

-- Trigger
-- .  Create trigger before insert check if the prison is full or not.   
--If  the prison is full , show notification the prison is full and cannot  insert .
CREATE OR REPLACE TRIGGER check_full
BEFORE INSERT ON PRISONER

FOR EACH ROW
DECLARE
    AMOUNT INT;
    VOL INT;   
BEGIN
    SELECT COUNT(P.PRID) INTO AMOUNT
    FROM PRISONER P
    WHERE P.PID = :NEW.PID;
    
    SELECT P2.CAPACITY INTO VOL
    FROM PRISON P2
    WHERE P2.PID = :NEW.PID;
    
    IF AMOUNT >= VOL THEN
        RAISE_APPLICATION_ERROR(-20000,'The prison is full.');
    END IF;
END;

--INSERT INTO PRISONER VALUES(10014, 'Mai Nguyen','Male', 30, '31/7/2016', '1/8/2022', 'Sai Gon',103,100002);        
        
-- Create trigger before update on jailer table . If the new status is absence,  update task id is null.  
CREATE OR REPLACE TRIGGER CHECK_STATUS
BEFORE UPDATE ON JAILER
FOR EACH ROW
BEGIN
    IF :NEW.STATUS = 'Absence' THEN 
        :NEW.TID := NULL;
    END IF;
END;

--update jailer set status = 'Absence' where jid = 1002;

-- Write trigger before delete check the break free date of prisoner, if the prisoner end date >  sys date ,  show error  Cannot delete.

CREATE OR REPLACE TRIGGER CHECK_END_DATE 
AFTER DELETE ON PRISONER
FOR EACH ROW
DECLARE
    RES DATE;
BEGIN
    IF :OLD.ENDDATE > SYSDATE THEN
        RAISE_APPLICATION_ERROR(-20000,'Cannot delete prisoner.');
    END IF;
END;


--Delete from prisoner where prid = 10005;


